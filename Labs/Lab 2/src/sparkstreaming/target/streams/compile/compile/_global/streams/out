[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:19:13: in XML literal: '=' expected instead of '>'[0m
[0m[[0m[31merror[0m] [0m[0m    <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m            ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:5: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m    ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:6: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m     ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:9: in XML literal: '=' expected instead of 'k'[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m        ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:10: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m         ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:11: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:21: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m                    ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:22: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:27: in XML literal: '=' expected instead of 'I'[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m                          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:20:28: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val kafkaConf = <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m                           ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:21:58: in XML literal: '=' expected instead of '>'[0m
[0m[[0m[31merror[0m] [0m[0m    val messages = KafkaUtils.createDirectStream.<FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m                                                         ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:22:5: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m    ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:22:6: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m     ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:22:11: in XML literal: '=' expected instead of 'I'[0m
[0m[[0m[31merror[0m] [0m[0m    <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:22:12: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    <FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m           ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:26:10: in XML literal: '=' expected instead of '>'[0m
[0m[[0m[31merror[0m] [0m[0m	<FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m	        ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:27:5: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m    ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:9: in XML literal: '=' expected instead of 's'[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m        ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:10: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m         ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:11: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:24: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                       ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:25: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                        ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:42: in XML literal: '=' expected instead of '('[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                                         ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:43: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                                          ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:44: in XML literal: whitespace expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                                           ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:49: in XML literal: '=' expected instead of 'I'[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                                                ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:28:50: in XML literal: ' or " delimited attribute value or '{' scala-expr '}' expected[0m
[0m[[0m[31merror[0m] [0m[0m    val stateDstream = pairs.mapWithState(<FILL IN>)[0m
[0m[[0m[31merror[0m] [0m[0m                                                 ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:32:3: in XML literal: in XML content, please use '}}' to express '}'[0m
[0m[[0m[31merror[0m] [0m[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m  ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:26:3:  I encountered a '}' where I didn't expect one, maybe this tag isn't closed <FILL>[0m
[0m[[0m[31merror[0m] [0m[0m	<FILL IN>[0m
[0m[[0m[31merror[0m] [0m[0m	 ^[0m
[0m[[0m[31merror[0m] [0m[0m/Users/emilstahl/Downloads/src/sparkstreaming/KafkaSpark.scala:33:2: input ended while parsing XML[0m
[0m[[0m[31merror[0m] [0m[0m}[0m
[0m[[0m[31merror[0m] [0m[0m ^[0m
[0m[[0m[31merror[0m] [0m[0m30 errors found[0m
